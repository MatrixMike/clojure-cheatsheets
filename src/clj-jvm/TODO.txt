Links to tutorial-style articles for these topics:
    parsing/generating XML

    zippers - I found these nice blog articles linked to from the
    Clojure 1.2 version of clojure.zip/zipper on clojuredocs.org.  I
    added the URLs to the Clojure 1.3 version, too.
        Brian Marick: "Editing" trees in Clojure with clojure.zip
        http://www.exampler.com/blog/2010/09/01/editing-trees-in-clojure-with-clojurezip/
        Alex Miller: Zippers with records in Clojure
        http://tech.puredanger.com/2010/10/22/zippers-with-records-in-clojure/

    Leiningen
    Java classpaths, JARs, etc.
        Maybe this would be a good quick start to Leiningen and Java classpaths?
        http://www.unexpected-vortices.com/clojure/brief-beginners-guide/

    This briefly describes several resources for those wanting to
    learn the Clojure language:
    http://www.elangocheran.com/blog/2012/03/the-newbies-guide-learning-clojure/

Introductory material on Lisp family languages, but not Clojure in particular:
    http://www.lisperati.com/clojure-spels/casting.html

Intermediate to advanced material on Common Lisp macros:
    "On Lisp", Paul Graham, TBD: find link to free copy

Add example literals: octal 017 hex 0xff scientific notation -1.1e-1
any base up to 36: 2r1010

Add tooltips for links that do not go to clojuredocs.org.  They don't
have to be anything fancy -- just something that makes it obvious they
are not doc strings, and the web page isn't 'broken'.

Add some brief notes about how different types of arithmetic work:
bigint contagion, operators that auto-convert to bigint if needed,
unchecked operators intended only for primitive arith types.  How to
format/printf bigints and ratios.  What else?

----------------------------------------
Symbols from more namespaces, or at least links to the namespaces:

There are new contrib namespaces that are not mentioned anywhere.
Make a list of all of them, annotated with which are in now, and which
are not.  Consider creating a link to documentation for the entire
namespace somewhere on the cheatsheet, even if we don't include its
individual symbols.

Is this a complete list of new (i.e. Clojure 1.3) contrib libraries?

    http://clojure.github.com/

Is that list complete?  Are there any on the following page that are
not on the one above?

    https://github.com/clojure

Which ones worth adding to cheatsheet?  As of this time, it seems that
there are no documentation pages for any of these on clojuredocs.org
(I've filed a request asking if they plan to do so), but there are on
clojure.github.com (linked to from the page above).


Add links to entire namespaces on clojuredocs.org, e.g.:

http://clojuredocs.org/clojure_core/clojure.java.io


yes clojure.core
no  clojure.core.protocols (and keep it no?)
yes clojure.data
TBD clojure.inspector
TBDhi clojure.java.browse  (only clojure.java.browse/browse-url)
no  clojure.java.browse-ui (and keep it no?)
yes clojure.java.io
yes clojure.java.javadoc
TBD clojure.java.shell     (only sh, with-sh-env, with-sh-dir)
TBD clojure.main           (TBD: What is worth adding to cheatsheet, if any?)
yes clojure.pprint
TBD clojure.reflect        (only reflect)
yes clojure.repl
yes clojure.set
TBD clojure.stacktrace     (TBD: What is worth adding to cheatsheet, if any?  Is anything here more useful in any way than clojure.repl/pst ?)
yes clojure.string
TBDlo clojure.template
TBD clojure.test
TBDhi clojure.walk    (TBD: at least walk, prewalk, postwalk.  Anything else?)
yes clojure.xml (only parse so far.  TBD: Anything else worth adding?)
yes clojure.zip

Pages listing other Clojure libraries:
    http://www.clojure-toolbox.com/
    http://cnlojure.org/open.html
    http://clojure-libraries.appspot.com/

TBD: Is there any chance of merging the above efforts into 1 site
maintained at least as well as any of the existing ones?
----------------------------------------


Find good places to link to for macro things like the special syntax `
~ ~@, and perhaps also link to there from the Macros section header.


Give examples of syntax for type-hinting Java arrays of arbitrary Java
classes, with the link below for details:

    http://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName%28%29

Example in Abstractions section for extend-protocol

Consider adding (def f ns/g) and (def f #'ns/g) distinction, and what
it will do differently.  Any good article or docs to link to for that?



----------------------------------------------------------------------
ns, require, use, import
----------------------------------------------------------------------

Give most common examples of ns use, with :import, :require, and :use

Maybe also give the REPL equivalents of those expressions?

See this article for ideas of things that could be adapted to put
right into the cheatsheet:

    http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html
----------------------------------------------------------------------


Add java.io.DataOutputStream / java.io.DataInputStream links for
binary I/O?

java.util.Scanner might be nice to know about.

distinct? doesn't really operate on collections.  It is more like max,
min, and some others in taking an arbitrarily large but variable
number of arguments.  Is there a better place it belongs than
Collections/Content tests?

Decide which if any of the following symbols should be included in the
cheatsheet, and if so, where.

First, a short list of things that seems like they are among the more
significant ones to know about:

bases
class
clojure.repl/dir
clojure.repl/root-cause
definterface
extend
extend-protocol
extenders
extends?
satisfies?
supers
trampoline
type
underive
with-bindings



Now the complete list:

*'
*allow-unresolved-vars*
*assert*
*flush-on-newline*
*fn-loader*
*math-context*
*read-eval*
*source-path*
*unchecked-math*
*use-context-classloader*
*verbose-defrecords*
+'
-'
->ArrayChunk
->Vec
->VecNode
->VecSeq
-cache-protocol-fn
-reset-methods
EMPTY-NODE
accessor
add-classpath
agent-errors
await1
bases
bound?
chunk
chunk-append
chunk-buffer
chunk-cons
chunk-first
chunk-next
chunk-rest
chunked-seq?
class
class?
clear-agent-errors
clojure.data/Diff
clojure.data/EqualityPartition
clojure.data/diff-similar
clojure.data/equality-partition
clojure.java.io/Coercions
clojure.java.io/IOFactory
clojure.java.io/as-file
clojure.java.io/as-relative-path
clojure.java.io/as-url
clojure.java.io/default-streams-impl
clojure.java.io/delete-file
clojure.java.io/make-input-stream
clojure.java.io/make-output-stream
clojure.java.io/make-parents
clojure.java.io/make-reader
clojure.java.io/make-writer
clojure.java.io/resource
clojure.java.javadoc/*core-java-api*
clojure.java.javadoc/*feeling-lucky*
clojure.java.javadoc/*feeling-lucky-url*
clojure.java.javadoc/*local-javadocs*
clojure.java.javadoc/*remote-javadocs*
clojure.java.javadoc/add-local-javadoc
clojure.java.javadoc/add-remote-javadoc
clojure.pprint/*print-base*
clojure.pprint/*print-miser-width*
clojure.pprint/*print-pprint-dispatch*
clojure.pprint/*print-pretty*
clojure.pprint/*print-radix*
clojure.pprint/*print-right-margin*
clojure.pprint/*print-suppress-namespaces*
clojure.pprint/code-dispatch
clojure.pprint/formatter
clojure.pprint/formatter-out
clojure.pprint/fresh-line
clojure.pprint/get-pretty-writer
clojure.pprint/pp
clojure.pprint/pprint-indent
clojure.pprint/pprint-logical-block
clojure.pprint/pprint-newline
clojure.pprint/pprint-tab
clojure.pprint/print-length-loop
clojure.pprint/set-pprint-dispatch
clojure.pprint/simple-dispatch
clojure.pprint/with-pprint-dispatch
clojure.pprint/write
clojure.pprint/write-out
clojure.repl/demunge
clojure.repl/dir
clojure.repl/dir-fn
clojure.repl/root-cause
clojure.repl/set-break-handler!
clojure.repl/source-fn
clojure.repl/stack-element-str
clojure.repl/thread-stopper
clojure.xml/*current*
clojure.xml/*sb*
clojure.xml/*stack*
clojure.xml/*state*
clojure.xml/attrs
clojure.xml/content
clojure.xml/content-handler
clojure.xml/element
clojure.xml/emit
clojure.xml/emit-element
clojure.xml/startparse-sax
clojure.xml/tag
create-struct
dec'
decimal?
definterface
defstruct
delay?
denominator
destructure
extend
extend-protocol
extenders
extends?
find-protocol-impl
find-protocol-method
float?
hash-combine
inc'
integer?
letfn
method-sig
munge
namespace-munge
number?
numerator
primitives-classnames
print-ctor
print-dup
print-method
print-simple
proxy-call-with-super
proxy-name
ratio?
rational?
refer-clojure
replicate
satisfies?
sequence
special-symbol?
struct
struct-map
supers
the-ns
trampoline
type
unchecked-add
unchecked-byte
unchecked-char
unchecked-dec
unchecked-double
unchecked-float
unchecked-inc
unchecked-int
unchecked-long
unchecked-multiply
unchecked-negate
unchecked-short
unchecked-subtract
underive
unquote
unquote-splicing
with-bindings
with-bindings*
with-loading-context
